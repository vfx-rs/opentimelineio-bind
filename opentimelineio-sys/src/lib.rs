/* automatically generated by rust-bindgen 0.60.1 */

pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const __USE_ANSI: u32 = 1;
pub const _BSD_SOURCE: u32 = 1;
pub const _SVID_SOURCE: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __USE_MISC: u32 = 1;
pub const __USE_BSD: u32 = 1;
pub const __USE_SVID: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_ISO_10646__: u32 = 201103;
pub const __STDC_NO_THREADS__: u32 = 1;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 17;
pub const __GLIBC_HAVE_LONG_LONG: u32 = 1;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const _BITS_WCHAR_H: u32 = 1;
pub const __WCHAR_MIN: i32 = -2147483648;
pub const __WCHAR_MAX: u32 = 2147483647;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WCHAR_MIN: i32 = -2147483648;
pub const WCHAR_MAX: u32 = 2147483647;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OpenTimeErrorStatus {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorStatus {
    _unused: [u8; 0],
}
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_OK:
    OpenTime_ErrorStatus_Outcome_ = 0;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_INVALID_TIMECODE_RATE:
    OpenTime_ErrorStatus_Outcome_ = 1;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_NON_DROPFRAME_RATE:
    OpenTime_ErrorStatus_Outcome_ = 2;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_INVALID_TIMECODE_STRING:
    OpenTime_ErrorStatus_Outcome_ = 3;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_INVALID_TIME_STRING:
    OpenTime_ErrorStatus_Outcome_ = 4;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_TIMECODE_RATE_MISMATCH:
    OpenTime_ErrorStatus_Outcome_ = 5;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_NEGATIVE_VALUE:
    OpenTime_ErrorStatus_Outcome_ = 6;
pub const OpenTime_ErrorStatus_Outcome__OpenTime_ErrorStatus_Outcome_INVALID_RATE_FOR_DROP_FRAME_TIMECODE : OpenTime_ErrorStatus_Outcome_ = 7 ;
pub type OpenTime_ErrorStatus_Outcome_ = ::std::os::raw::c_uint;
pub type OpenTime_ErrorStatus_Outcome = ::std::os::raw::c_int;
extern "C" {
    pub fn OpenTimeErrorStatus_create() -> *mut OpenTimeErrorStatus;
}
extern "C" {
    pub fn OpenTimeErrorStatus_create_with_outcome(
        in_outcome: OpenTime_ErrorStatus_Outcome,
    ) -> *mut OpenTimeErrorStatus;
}
extern "C" {
    pub fn OpenTimeErrorStatus_create_with_outcome_and_details(
        in_outcome: OpenTime_ErrorStatus_Outcome,
        in_details: *const ::std::os::raw::c_char,
    ) -> *mut OpenTimeErrorStatus;
}
extern "C" {
    pub fn OpenTimeErrorStatus_outcome_to_string(
        self_: *mut OpenTimeErrorStatus,
        var1: OpenTime_ErrorStatus_Outcome,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OpenTimeErrorStatus_destroy(self_: *mut OpenTimeErrorStatus);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RationalTime {
    pub value: f64,
    pub rate: f64,
}
#[test]
fn bindgen_test_layout_RationalTime() {
    assert_eq!(
        ::std::mem::size_of::<RationalTime>(),
        16usize,
        concat!("Size of: ", stringify!(RationalTime))
    );
    assert_eq!(
        ::std::mem::align_of::<RationalTime>(),
        8usize,
        concat!("Alignment of ", stringify!(RationalTime))
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RationalTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(RationalTime),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<RationalTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
            },
            8usize,
            concat!(
                "Offset of field: ",
                stringify!(RationalTime),
                "::",
                stringify!(rate)
            )
        );
    }
    test_field_rate();
}
pub const OpenTime_IsDropFrameRate__OpenTime_IsDropFrameRate_InferFromRate:
    OpenTime_IsDropFrameRate_ = -1;
pub const OpenTime_IsDropFrameRate__OpenTime_IsDropFrameRate_ForceNo: OpenTime_IsDropFrameRate_ = 0;
pub const OpenTime_IsDropFrameRate__OpenTime_IsDropFrameRate_ForceYes: OpenTime_IsDropFrameRate_ =
    1;
pub type OpenTime_IsDropFrameRate_ = ::std::os::raw::c_int;
pub type OpenTime_IsDropFrameRate = ::std::os::raw::c_int;
extern "C" {
    pub fn RationalTime_create(value: f64, rate: f64) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_is_invalid_time(self_: RationalTime) -> bool;
}
extern "C" {
    pub fn RationalTime_value(self_: RationalTime) -> f64;
}
extern "C" {
    pub fn RationalTime_rate(self_: RationalTime) -> f64;
}
extern "C" {
    pub fn RationalTime_rescaled_to(self_: RationalTime, new_rate: f64) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_rescaled_to_rational_time(
        self_: RationalTime,
        rt: RationalTime,
    ) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_value_rescaled_to_rate(self_: RationalTime, new_rate: f64) -> f64;
}
extern "C" {
    pub fn RationalTime_value_rescaled_to_rational_time(
        self_: RationalTime,
        rt: RationalTime,
    ) -> f64;
}
extern "C" {
    pub fn RationalTime_almost_equal(self_: RationalTime, other: RationalTime, delta: f64) -> bool;
}
extern "C" {
    pub fn RationalTime_duration_from_start_end_time(
        start_time: RationalTime,
        end_time_exclusive: RationalTime,
    ) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_is_valid_timecode_rate(rate: f64) -> bool;
}
extern "C" {
    pub fn RationalTime_from_frames(frame: f64, rate: f64) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_from_seconds(seconds: f64) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_from_timecode(
        timecode: *const ::std::os::raw::c_char,
        rate: f64,
        error_status: *mut OpenTimeErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_from_time_string(
        time_string: *const ::std::os::raw::c_char,
        rate: f64,
        error_status: *mut OpenTimeErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_to_frames(self_: RationalTime) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RationalTime_to_frames_with_rate(
        self_: RationalTime,
        rate: f64,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn RationalTime_to_seconds(self_: RationalTime) -> f64;
}
extern "C" {
    pub fn RationalTime_to_timecode(
        self_: RationalTime,
        rate: f64,
        drop_frame: OpenTime_IsDropFrameRate,
        error_status: *mut OpenTimeErrorStatus,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RationalTime_to_timecode_auto(
        self_: RationalTime,
        error_status: *mut OpenTimeErrorStatus,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RationalTime_to_time_string(self_: RationalTime) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn RationalTime_add(lhs: RationalTime, rhs: RationalTime) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_subtract(lhs: RationalTime, rhs: RationalTime) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_compare(lhs: RationalTime, rhs: RationalTime) -> RationalTime;
}
extern "C" {
    pub fn RationalTime_equal(lhs: RationalTime, rhs: RationalTime) -> bool;
}
extern "C" {
    pub fn RationalTime_not_equal(lhs: RationalTime, rhs: RationalTime) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeRange {
    pub start_time: RationalTime,
    pub duration: RationalTime,
}
#[test]
fn bindgen_test_layout_TimeRange() {
    assert_eq!(
        ::std::mem::size_of::<TimeRange>(),
        32usize,
        concat!("Size of: ", stringify!(TimeRange))
    );
    assert_eq!(
        ::std::mem::align_of::<TimeRange>(),
        8usize,
        concat!("Alignment of ", stringify!(TimeRange))
    );
    fn test_field_start_time() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TimeRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).start_time) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TimeRange),
                "::",
                stringify!(start_time)
            )
        );
    }
    test_field_start_time();
    fn test_field_duration() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TimeRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).duration) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TimeRange),
                "::",
                stringify!(duration)
            )
        );
    }
    test_field_duration();
}
extern "C" {
    pub fn TimeRange_create() -> TimeRange;
}
extern "C" {
    pub fn TimeRange_create_with_start_time(start_time: RationalTime) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_create_with_duration(duration: RationalTime) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_create_with_start_time_and_duration(
        start_time: RationalTime,
        duration: RationalTime,
    ) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_start_time(self_: TimeRange) -> RationalTime;
}
extern "C" {
    pub fn TimeRange_duration(self_: TimeRange) -> RationalTime;
}
extern "C" {
    pub fn TimeRange_end_time_inclusive(self_: TimeRange) -> RationalTime;
}
extern "C" {
    pub fn TimeRange_end_time_exclusive(self_: TimeRange) -> RationalTime;
}
extern "C" {
    pub fn TimeRange_duration_extended_by(self_: TimeRange, other: RationalTime) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_extended_by(self_: TimeRange, other: TimeRange) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_clamped_with_rational_time(
        self_: TimeRange,
        other: RationalTime,
    ) -> RationalTime;
}
extern "C" {
    pub fn TimeRange_clamped_with_time_range(self_: TimeRange, other: TimeRange) -> TimeRange;
}
extern "C" {
    pub fn TimeRange_contains_rational_time(self_: TimeRange, other: RationalTime) -> bool;
}
extern "C" {
    pub fn TimeRange_contains_time_range(self_: TimeRange, other: TimeRange) -> bool;
}
extern "C" {
    pub fn TimeRange_overlaps_rational_time(self_: TimeRange, other: RationalTime) -> bool;
}
extern "C" {
    pub fn TimeRange_overlaps_time_range(self_: TimeRange, other: TimeRange) -> bool;
}
extern "C" {
    pub fn TimeRange_equal(lhs: TimeRange, rhs: TimeRange) -> bool;
}
extern "C" {
    pub fn TimeRange_not_equal(lhs: TimeRange, rhs: TimeRange) -> bool;
}
extern "C" {
    pub fn TimeRange_range_from_start_end_time(
        start_time: RationalTime,
        end_time_exclusive: RationalTime,
    ) -> TimeRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeTransform {
    pub offset: RationalTime,
    pub scale: f64,
    pub rate: f64,
}
#[test]
fn bindgen_test_layout_TimeTransform() {
    assert_eq!(
        ::std::mem::size_of::<TimeTransform>(),
        32usize,
        concat!("Size of: ", stringify!(TimeTransform))
    );
    assert_eq!(
        ::std::mem::align_of::<TimeTransform>(),
        8usize,
        concat!("Alignment of ", stringify!(TimeTransform))
    );
    fn test_field_offset() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TimeTransform>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(TimeTransform),
                "::",
                stringify!(offset)
            )
        );
    }
    test_field_offset();
    fn test_field_scale() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TimeTransform>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).scale) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(TimeTransform),
                "::",
                stringify!(scale)
            )
        );
    }
    test_field_scale();
    fn test_field_rate() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<TimeTransform>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).rate) as usize - ptr as usize
            },
            24usize,
            concat!(
                "Offset of field: ",
                stringify!(TimeTransform),
                "::",
                stringify!(rate)
            )
        );
    }
    test_field_rate();
}
extern "C" {
    pub fn TimeTransform_create() -> TimeTransform;
}
extern "C" {
    pub fn TimeTransform_create_with_offset_scale_rate(
        offset: RationalTime,
        scale: f64,
        rate: f64,
    ) -> TimeTransform;
}
extern "C" {
    pub fn TimeTransform_offset(self_: TimeTransform) -> RationalTime;
}
extern "C" {
    pub fn TimeTransform_scale(self_: TimeTransform) -> f64;
}
extern "C" {
    pub fn TimeTransform_rate(self_: TimeTransform) -> f64;
}
extern "C" {
    pub fn TimeTransform_applied_to_time_range(self_: TimeTransform, other: TimeRange)
        -> TimeRange;
}
extern "C" {
    pub fn TimeTransform_applied_to_time_transform(
        self_: TimeTransform,
        other: TimeTransform,
    ) -> TimeTransform;
}
extern "C" {
    pub fn TimeTransform_applied_to_rational_time(
        self_: TimeTransform,
        other: RationalTime,
    ) -> RationalTime;
}
extern "C" {
    pub fn TimeTransform_equal(lhs: TimeTransform, rhs: TimeTransform) -> bool;
}
extern "C" {
    pub fn TimeTransform_not_equal(lhs: TimeTransform, rhs: TimeTransform) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionalRationalTime {
    pub value: RationalTime,
    pub valid: bool,
}
#[test]
fn bindgen_test_layout_OptionalRationalTime() {
    assert_eq!(
        ::std::mem::size_of::<OptionalRationalTime>(),
        24usize,
        concat!("Size of: ", stringify!(OptionalRationalTime))
    );
    assert_eq!(
        ::std::mem::align_of::<OptionalRationalTime>(),
        8usize,
        concat!("Alignment of ", stringify!(OptionalRationalTime))
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OptionalRationalTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OptionalRationalTime),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OptionalRationalTime>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            16usize,
            concat!(
                "Offset of field: ",
                stringify!(OptionalRationalTime),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
}
extern "C" {
    pub fn OptionalRationalTime_create(rationalTime: RationalTime) -> OptionalRationalTime;
}
extern "C" {
    pub fn OptionalRationalTime_create_null() -> OptionalRationalTime;
}
extern "C" {
    pub fn OptionalRationalTime_valid(optionalRationalTime: OptionalRationalTime) -> bool;
}
extern "C" {
    pub fn OptionalRationalTime_value(optionalRationalTime: OptionalRationalTime) -> RationalTime;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionalTimeRange {
    pub value: TimeRange,
    pub valid: bool,
}
#[test]
fn bindgen_test_layout_OptionalTimeRange() {
    assert_eq!(
        ::std::mem::size_of::<OptionalTimeRange>(),
        40usize,
        concat!("Size of: ", stringify!(OptionalTimeRange))
    );
    assert_eq!(
        ::std::mem::align_of::<OptionalTimeRange>(),
        8usize,
        concat!("Alignment of ", stringify!(OptionalTimeRange))
    );
    fn test_field_value() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OptionalTimeRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).value) as usize - ptr as usize
            },
            0usize,
            concat!(
                "Offset of field: ",
                stringify!(OptionalTimeRange),
                "::",
                stringify!(value)
            )
        );
    }
    test_field_value();
    fn test_field_valid() {
        assert_eq!(
            unsafe {
                let uninit = ::std::mem::MaybeUninit::<OptionalTimeRange>::uninit();
                let ptr = uninit.as_ptr();
                ::std::ptr::addr_of!((*ptr).valid) as usize - ptr as usize
            },
            32usize,
            concat!(
                "Offset of field: ",
                stringify!(OptionalTimeRange),
                "::",
                stringify!(valid)
            )
        );
    }
    test_field_valid();
}
extern "C" {
    pub fn OptionalTimeRange_create(timeRange: TimeRange) -> OptionalTimeRange;
}
extern "C" {
    pub fn OptionalTimeRange_create_null() -> OptionalTimeRange;
}
extern "C" {
    pub fn OptionalTimeRange_valid(optionalTimeRange: OptionalTimeRange) -> bool;
}
extern "C" {
    pub fn OptionalTimeRange_value(optionalTimeRange: OptionalTimeRange) -> TimeRange;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Any {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Any_destroy(self_: *mut Any);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyDictionaryIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyDictionary {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyDictionaryMutationStamp {
    _unused: [u8; 0],
}
extern "C" {
    pub fn AnyDictionary_create() -> *mut AnyDictionary;
}
extern "C" {
    pub fn AnyDictionary_destroy(self_: *mut AnyDictionary);
}
extern "C" {
    pub fn AnyDictionary_clear(self_: *mut AnyDictionary);
}
extern "C" {
    pub fn AnyDictionary_begin(self_: *mut AnyDictionary) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionary_end(self_: *mut AnyDictionary) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionary_swap(self_: *mut AnyDictionary, other: *mut AnyDictionary);
}
extern "C" {
    pub fn AnyDictionary_erase(
        self_: *mut AnyDictionary,
        pos: *mut AnyDictionaryIterator,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionary_erase_range(
        self_: *mut AnyDictionary,
        first: *mut AnyDictionaryIterator,
        last: *mut AnyDictionaryIterator,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionary_erase_key(
        self_: *mut AnyDictionary,
        key: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyDictionary_size(self_: *mut AnyDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyDictionary_max_size(self_: *mut AnyDictionary) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyDictionary_empty(self_: *mut AnyDictionary) -> bool;
}
extern "C" {
    pub fn AnyDictionary_find(
        self_: *mut AnyDictionary,
        key: *const ::std::os::raw::c_char,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionary_insert(
        self_: *mut AnyDictionary,
        key: *const ::std::os::raw::c_char,
        anyObj: *mut Any,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionaryIterator_advance(
        iter: *mut AnyDictionaryIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn AnyDictionaryIterator_next(
        iter: *mut AnyDictionaryIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionaryIterator_prev(
        iter: *mut AnyDictionaryIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut AnyDictionaryIterator;
}
extern "C" {
    pub fn AnyDictionaryIterator_key(
        iter: *mut AnyDictionaryIterator,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn AnyDictionaryIterator_value(iter: *mut AnyDictionaryIterator) -> *mut Any;
}
extern "C" {
    pub fn AnyDictionaryIterator_equal(
        lhs: *mut AnyDictionaryIterator,
        rhs: *mut AnyDictionaryIterator,
    ) -> bool;
}
extern "C" {
    pub fn AnyDictionaryIterator_not_equal(
        lhs: *mut AnyDictionaryIterator,
        rhs: *mut AnyDictionaryIterator,
    ) -> bool;
}
extern "C" {
    pub fn AnyDictionaryIterator_destroy(self_: *mut AnyDictionaryIterator);
}
extern "C" {
    pub fn AnyDictionaryMutationStamp_create(
        d: *mut AnyDictionary,
    ) -> *mut AnyDictionaryMutationStamp;
}
extern "C" {
    pub fn AnyDictionaryMutationStamp_destroy(self_: *mut AnyDictionaryMutationStamp);
}
extern "C" {
    pub fn AnyDictionary_get_or_create_mutation_stamp(
        self_: *mut AnyDictionary,
    ) -> *mut AnyDictionaryMutationStamp;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyVector {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AnyVectorMutationStamp {
    _unused: [u8; 0],
}
extern "C" {
    pub fn AnyVector_create() -> *mut AnyVector;
}
extern "C" {
    pub fn AnyVector_destroy(self_: *mut AnyVector);
}
extern "C" {
    pub fn AnyVector_begin(self_: *mut AnyVector) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVector_end(self_: *mut AnyVector) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVector_size(self_: *mut AnyVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyVector_max_size(self_: *mut AnyVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyVector_capacity(self_: *mut AnyVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn AnyVector_resize(self_: *mut AnyVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AnyVector_empty(self_: *mut AnyVector) -> bool;
}
extern "C" {
    pub fn AnyVector_shrink_to_fit(self_: *mut AnyVector);
}
extern "C" {
    pub fn AnyVector_reserve(self_: *mut AnyVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AnyVector_swap(self_: *mut AnyVector, other: *mut AnyVector);
}
extern "C" {
    pub fn AnyVector_at(self_: *mut AnyVector, pos: ::std::os::raw::c_int) -> *mut Any;
}
extern "C" {
    pub fn AnyVector_push_back(self_: *mut AnyVector, value: *mut Any);
}
extern "C" {
    pub fn AnyVector_pop_back(self_: *mut AnyVector);
}
extern "C" {
    pub fn AnyVector_insert(
        self_: *mut AnyVector,
        pos: *mut AnyVectorIterator,
        val: *mut Any,
    ) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVector_clear(self_: *mut AnyVector);
}
extern "C" {
    pub fn AnyVector_erase(
        self_: *mut AnyVector,
        pos: *mut AnyVectorIterator,
    ) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVector_erase_range(
        self_: *mut AnyVector,
        first: *mut AnyVectorIterator,
        last: *mut AnyVectorIterator,
    ) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVectorIterator_advance(iter: *mut AnyVectorIterator, dist: ::std::os::raw::c_int);
}
extern "C" {
    pub fn AnyVectorIterator_next(
        iter: *mut AnyVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVectorIterator_prev(
        iter: *mut AnyVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut AnyVectorIterator;
}
extern "C" {
    pub fn AnyVectorIterator_value(iter: *mut AnyVectorIterator) -> *mut Any;
}
extern "C" {
    pub fn AnyVectorIterator_equal(
        lhs: *mut AnyVectorIterator,
        rhs: *mut AnyVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn AnyVectorIterator_not_equal(
        lhs: *mut AnyVectorIterator,
        rhs: *mut AnyVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn AnyVectorIterator_destroy(self_: *mut AnyVectorIterator);
}
extern "C" {
    pub fn MutationStamp_create(v: *mut AnyVector) -> *mut AnyVectorMutationStamp;
}
extern "C" {
    pub fn MutationStamp_destroy(self_: *mut AnyVectorMutationStamp);
}
extern "C" {
    pub fn AnyVector_get_or_create_mutation_stamp(
        self_: *mut AnyVector,
    ) -> *mut AnyVectorMutationStamp;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetainerSerializableObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OTIOSerializableObject {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OTIOErrorStatus {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RetainerSerializableObject_create(
        obj: *mut OTIOSerializableObject,
    ) -> *mut RetainerSerializableObject;
}
extern "C" {
    pub fn RetainerSerializableObject_take_value(
        self_: *mut RetainerSerializableObject,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn RetainerSerializableObject_value(
        self_: *mut RetainerSerializableObject,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn RetainerSerializableObject_managed_destroy(self_: *mut RetainerSerializableObject);
}
extern "C" {
    pub fn SerializableObject_create() -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObject_to_json_file(
        self_: *mut OTIOSerializableObject,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObject_to_json_string(
        self_: *mut OTIOSerializableObject,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableObject_from_json_file(
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObject_from_json_string(
        input: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObject_is_equivalent_to(
        self_: *mut OTIOSerializableObject,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObject_clone(
        self_: *mut OTIOSerializableObject,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObject_is_unknown_schema(self_: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn SerializableObject_schema_name(
        self_: *mut OTIOSerializableObject,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableObject_schema_version(
        self_: *mut OTIOSerializableObject,
    ) -> ::std::os::raw::c_int;
}
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_OK: OTIO_ErrorStatus_Outcome_ = 0;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_NOT_IMPLEMENTED:
    OTIO_ErrorStatus_Outcome_ = 1;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_UNRESOLVED_OBJECT_REFERENCE:
    OTIO_ErrorStatus_Outcome_ = 2;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_DUPLICATE_OBJECT_REFERENCE:
    OTIO_ErrorStatus_Outcome_ = 3;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_MALFORMED_SCHEMA:
    OTIO_ErrorStatus_Outcome_ = 4;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_JSON_PARSE_ERROR:
    OTIO_ErrorStatus_Outcome_ = 5;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_CHILD_ALREADY_PARENTED:
    OTIO_ErrorStatus_Outcome_ = 6;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_FILE_OPEN_FAILED:
    OTIO_ErrorStatus_Outcome_ = 7;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_FILE_WRITE_FAILED:
    OTIO_ErrorStatus_Outcome_ = 8;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_SCHEMA_ALREADY_REGISTERED:
    OTIO_ErrorStatus_Outcome_ = 9;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_SCHEMA_NOT_REGISTERED:
    OTIO_ErrorStatus_Outcome_ = 10;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_SCHEMA_VERSION_UNSUPPORTED:
    OTIO_ErrorStatus_Outcome_ = 11;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_KEY_NOT_FOUND:
    OTIO_ErrorStatus_Outcome_ = 12;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_ILLEGAL_INDEX:
    OTIO_ErrorStatus_Outcome_ = 13;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_TYPE_MISMATCH:
    OTIO_ErrorStatus_Outcome_ = 14;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_INTERNAL_ERROR:
    OTIO_ErrorStatus_Outcome_ = 15;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_NOT_AN_ITEM:
    OTIO_ErrorStatus_Outcome_ = 16;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_NOT_A_CHILD_OF:
    OTIO_ErrorStatus_Outcome_ = 17;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_NOT_A_CHILD:
    OTIO_ErrorStatus_Outcome_ = 18;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_NOT_DESCENDED_FROM:
    OTIO_ErrorStatus_Outcome_ = 19;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_CANNOT_COMPUTE_AVAILABLE_RANGE:
    OTIO_ErrorStatus_Outcome_ = 20;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_INVALID_TIME_RANGE:
    OTIO_ErrorStatus_Outcome_ = 21;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_OBJECT_WITHOUT_DURATION:
    OTIO_ErrorStatus_Outcome_ = 22;
pub const OTIO_ErrorStatus_Outcome__OTIO_ErrorStatus_Outcome_CANNOT_TRIM_TRANSITION:
    OTIO_ErrorStatus_Outcome_ = 23;
pub type OTIO_ErrorStatus_Outcome_ = ::std::os::raw::c_uint;
pub type OTIO_ErrorStatus_Outcome = ::std::os::raw::c_int;
extern "C" {
    pub fn OTIOErrorStatus_create() -> *mut OTIOErrorStatus;
}
extern "C" {
    pub fn OTIOErrorStatus_create_with_outcome(
        in_outcome: OTIO_ErrorStatus_Outcome,
    ) -> *mut OTIOErrorStatus;
}
extern "C" {
    pub fn OTIOErrorStatus_create_with_outcome_details_serializable_object(
        in_outcome: OTIO_ErrorStatus_Outcome,
        in_details: *const ::std::os::raw::c_char,
        object: *mut OTIOSerializableObject,
    ) -> *mut OTIOErrorStatus;
}
extern "C" {
    pub fn OTIOErrorStatus_outcome_to_string(
        var1: OTIO_ErrorStatus_Outcome,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn OTIOErrorStatus_get_outcome(self_: *mut OTIOErrorStatus) -> OTIO_ErrorStatus_Outcome;
}
extern "C" {
    pub fn OTIOErrorStatus_destroy(self_: *mut OTIOErrorStatus);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetainerComposable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Composable {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Composition {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RetainerComposable_create(obj: *mut Composable) -> *mut RetainerComposable;
}
extern "C" {
    pub fn RetainerComposable_take_value(self_: *mut RetainerComposable) -> *mut Composable;
}
extern "C" {
    pub fn RetainerComposable_value(self_: *mut RetainerComposable) -> *mut Composable;
}
extern "C" {
    pub fn RetainerComposable_managed_destroy(self_: *mut RetainerComposable);
}
extern "C" {
    pub fn Composable_create() -> *mut Composable;
}
extern "C" {
    pub fn Composable_create_with_name_and_metadata(
        name: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut Composable;
}
extern "C" {
    pub fn Composable_visible(self_: *mut Composable) -> bool;
}
extern "C" {
    pub fn Composable_overlapping(self_: *mut Composable) -> bool;
}
extern "C" {
    pub fn Composable_parent(self_: *mut Composable) -> *mut Composition;
}
extern "C" {
    pub fn Composable_duration(
        self_: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Composable_name(self_: *mut Composable) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composable_metadata(self_: *mut Composable) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Composable_set_name(self_: *mut Composable, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Composable_to_json_file(
        self_: *mut Composable,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Composable_to_json_string(
        self_: *mut Composable,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composable_is_equivalent_to(
        self_: *mut Composable,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn Composable_clone(
        self_: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Composable;
}
extern "C" {
    pub fn Composable_schema_name(self_: *mut Composable) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composable_schema_version(self_: *mut Composable) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComposableRetainerVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComposableRetainerVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ComposableRetainerVector_create() -> *mut ComposableRetainerVector;
}
extern "C" {
    pub fn ComposableRetainerVector_destroy(self_: *mut ComposableRetainerVector);
}
extern "C" {
    pub fn ComposableRetainerVector_begin(
        self_: *mut ComposableRetainerVector,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVector_end(
        self_: *mut ComposableRetainerVector,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVector_size(
        self_: *mut ComposableRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableRetainerVector_max_size(
        self_: *mut ComposableRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableRetainerVector_capacity(
        self_: *mut ComposableRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableRetainerVector_resize(
        self_: *mut ComposableRetainerVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ComposableRetainerVector_empty(self_: *mut ComposableRetainerVector) -> bool;
}
extern "C" {
    pub fn ComposableRetainerVector_shrink_to_fit(self_: *mut ComposableRetainerVector);
}
extern "C" {
    pub fn ComposableRetainerVector_reserve(
        self_: *mut ComposableRetainerVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ComposableRetainerVector_swap(
        self_: *mut ComposableRetainerVector,
        other: *mut ComposableRetainerVector,
    );
}
extern "C" {
    pub fn ComposableRetainerVector_at(
        self_: *mut ComposableRetainerVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut RetainerComposable;
}
extern "C" {
    pub fn ComposableRetainerVector_push_back(
        self_: *mut ComposableRetainerVector,
        value: *mut RetainerComposable,
    );
}
extern "C" {
    pub fn ComposableRetainerVector_pop_back(self_: *mut ComposableRetainerVector);
}
extern "C" {
    pub fn ComposableRetainerVector_insert(
        self_: *mut ComposableRetainerVector,
        pos: *mut ComposableRetainerVectorIterator,
        val: *mut RetainerComposable,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVector_clear(self_: *mut ComposableRetainerVector);
}
extern "C" {
    pub fn ComposableRetainerVector_erase(
        self_: *mut ComposableRetainerVector,
        pos: *mut ComposableRetainerVectorIterator,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVector_erase_range(
        self_: *mut ComposableRetainerVector,
        first: *mut ComposableRetainerVectorIterator,
        last: *mut ComposableRetainerVectorIterator,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_advance(
        iter: *mut ComposableRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_next(
        iter: *mut ComposableRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_prev(
        iter: *mut ComposableRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut ComposableRetainerVectorIterator;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_value(
        iter: *mut ComposableRetainerVectorIterator,
    ) -> *mut RetainerComposable;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_equal(
        lhs: *mut ComposableRetainerVectorIterator,
        rhs: *mut ComposableRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_not_equal(
        lhs: *mut ComposableRetainerVectorIterator,
        rhs: *mut ComposableRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn ComposableRetainerVectorIterator_destroy(self_: *mut ComposableRetainerVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComposableVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ComposableVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ComposableVector_create() -> *mut ComposableVector;
}
extern "C" {
    pub fn ComposableVector_destroy(self_: *mut ComposableVector);
}
extern "C" {
    pub fn ComposableVector_begin(self_: *mut ComposableVector) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVector_end(self_: *mut ComposableVector) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVector_size(self_: *mut ComposableVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableVector_max_size(self_: *mut ComposableVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableVector_capacity(self_: *mut ComposableVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn ComposableVector_resize(self_: *mut ComposableVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ComposableVector_empty(self_: *mut ComposableVector) -> bool;
}
extern "C" {
    pub fn ComposableVector_shrink_to_fit(self_: *mut ComposableVector);
}
extern "C" {
    pub fn ComposableVector_reserve(self_: *mut ComposableVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn ComposableVector_swap(self_: *mut ComposableVector, other: *mut ComposableVector);
}
extern "C" {
    pub fn ComposableVector_at(
        self_: *mut ComposableVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut Composable;
}
extern "C" {
    pub fn ComposableVector_push_back(self_: *mut ComposableVector, value: *mut Composable);
}
extern "C" {
    pub fn ComposableVector_pop_back(self_: *mut ComposableVector);
}
extern "C" {
    pub fn ComposableVector_insert(
        self_: *mut ComposableVector,
        pos: *mut ComposableVectorIterator,
        val: *mut Composable,
    ) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVector_clear(self_: *mut ComposableVector);
}
extern "C" {
    pub fn ComposableVector_erase(
        self_: *mut ComposableVector,
        pos: *mut ComposableVectorIterator,
    ) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVector_erase_range(
        self_: *mut ComposableVector,
        first: *mut ComposableVectorIterator,
        last: *mut ComposableVectorIterator,
    ) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVectorIterator_advance(
        iter: *mut ComposableVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn ComposableVectorIterator_next(
        iter: *mut ComposableVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVectorIterator_prev(
        iter: *mut ComposableVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut ComposableVectorIterator;
}
extern "C" {
    pub fn ComposableVectorIterator_value(iter: *mut ComposableVectorIterator) -> *mut Composable;
}
extern "C" {
    pub fn ComposableVectorIterator_equal(
        lhs: *mut ComposableVectorIterator,
        rhs: *mut ComposableVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn ComposableVectorIterator_not_equal(
        lhs: *mut ComposableVectorIterator,
        rhs: *mut ComposableVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn ComposableVectorIterator_destroy(self_: *mut ComposableVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetainerEffect {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Effect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RetainerEffect_create(obj: *mut Effect) -> *mut RetainerEffect;
}
extern "C" {
    pub fn RetainerEffect_take_value(self_: *mut RetainerEffect) -> *mut Effect;
}
extern "C" {
    pub fn RetainerEffect_value(self_: *mut RetainerEffect) -> *mut Effect;
}
extern "C" {
    pub fn RetainerEffect_managed_destroy(self_: *mut RetainerEffect);
}
extern "C" {
    pub fn Effect_create(
        name: *const ::std::os::raw::c_char,
        effect_name: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut Effect;
}
extern "C" {
    pub fn Effect_effect_name(self_: *mut Effect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Effect_set_effect_name(self_: *mut Effect, effect_name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Effect_name(self_: *mut Effect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Effect_set_name(self_: *mut Effect, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Effect_metadata(self_: *mut Effect) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Effect_to_json_file(
        self_: *mut Effect,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Effect_to_json_string(
        self_: *mut Effect,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Effect_is_equivalent_to(self_: *mut Effect, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Effect_clone(self_: *mut Effect, error_status: *mut OTIOErrorStatus) -> *mut Effect;
}
extern "C" {
    pub fn Effect_schema_name(self_: *mut Effect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Effect_schema_version(self_: *mut Effect) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EffectRetainerVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EffectRetainerVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn EffectRetainerVector_create() -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn EffectRetainerVector_destroy(self_: *mut EffectRetainerVector);
}
extern "C" {
    pub fn EffectRetainerVector_begin(
        self_: *mut EffectRetainerVector,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVector_end(
        self_: *mut EffectRetainerVector,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVector_size(self_: *mut EffectRetainerVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectRetainerVector_max_size(self_: *mut EffectRetainerVector)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectRetainerVector_capacity(self_: *mut EffectRetainerVector)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectRetainerVector_resize(self_: *mut EffectRetainerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn EffectRetainerVector_empty(self_: *mut EffectRetainerVector) -> bool;
}
extern "C" {
    pub fn EffectRetainerVector_shrink_to_fit(self_: *mut EffectRetainerVector);
}
extern "C" {
    pub fn EffectRetainerVector_reserve(self_: *mut EffectRetainerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn EffectRetainerVector_swap(
        self_: *mut EffectRetainerVector,
        other: *mut EffectRetainerVector,
    );
}
extern "C" {
    pub fn EffectRetainerVector_at(
        self_: *mut EffectRetainerVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut RetainerEffect;
}
extern "C" {
    pub fn EffectRetainerVector_push_back(
        self_: *mut EffectRetainerVector,
        value: *mut RetainerEffect,
    );
}
extern "C" {
    pub fn EffectRetainerVector_pop_back(self_: *mut EffectRetainerVector);
}
extern "C" {
    pub fn EffectRetainerVector_insert(
        self_: *mut EffectRetainerVector,
        pos: *mut EffectRetainerVectorIterator,
        val: *mut RetainerEffect,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVector_clear(self_: *mut EffectRetainerVector);
}
extern "C" {
    pub fn EffectRetainerVector_erase(
        self_: *mut EffectRetainerVector,
        pos: *mut EffectRetainerVectorIterator,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVector_erase_range(
        self_: *mut EffectRetainerVector,
        first: *mut EffectRetainerVectorIterator,
        last: *mut EffectRetainerVectorIterator,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_advance(
        iter: *mut EffectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn EffectRetainerVectorIterator_next(
        iter: *mut EffectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_prev(
        iter: *mut EffectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut EffectRetainerVectorIterator;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_value(
        iter: *mut EffectRetainerVectorIterator,
    ) -> *mut RetainerEffect;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_equal(
        lhs: *mut EffectRetainerVectorIterator,
        rhs: *mut EffectRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_not_equal(
        lhs: *mut EffectRetainerVectorIterator,
        rhs: *mut EffectRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn EffectRetainerVectorIterator_destroy(self_: *mut EffectRetainerVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EffectVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EffectVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn EffectVector_create() -> *mut EffectVector;
}
extern "C" {
    pub fn EffectVector_destroy(self_: *mut EffectVector);
}
extern "C" {
    pub fn EffectVector_begin(self_: *mut EffectVector) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVector_end(self_: *mut EffectVector) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVector_size(self_: *mut EffectVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectVector_max_size(self_: *mut EffectVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectVector_capacity(self_: *mut EffectVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn EffectVector_resize(self_: *mut EffectVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn EffectVector_empty(self_: *mut EffectVector) -> bool;
}
extern "C" {
    pub fn EffectVector_shrink_to_fit(self_: *mut EffectVector);
}
extern "C" {
    pub fn EffectVector_reserve(self_: *mut EffectVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn EffectVector_swap(self_: *mut EffectVector, other: *mut EffectVector);
}
extern "C" {
    pub fn EffectVector_at(self_: *mut EffectVector, pos: ::std::os::raw::c_int) -> *mut Effect;
}
extern "C" {
    pub fn EffectVector_push_back(self_: *mut EffectVector, value: *mut Effect);
}
extern "C" {
    pub fn EffectVector_pop_back(self_: *mut EffectVector);
}
extern "C" {
    pub fn EffectVector_insert(
        self_: *mut EffectVector,
        pos: *mut EffectVectorIterator,
        val: *mut Effect,
    ) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVector_clear(self_: *mut EffectVector);
}
extern "C" {
    pub fn EffectVector_erase(
        self_: *mut EffectVector,
        pos: *mut EffectVectorIterator,
    ) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVector_erase_range(
        self_: *mut EffectVector,
        first: *mut EffectVectorIterator,
        last: *mut EffectVectorIterator,
    ) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVectorIterator_advance(
        iter: *mut EffectVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn EffectVectorIterator_next(
        iter: *mut EffectVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVectorIterator_prev(
        iter: *mut EffectVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut EffectVectorIterator;
}
extern "C" {
    pub fn EffectVectorIterator_value(iter: *mut EffectVectorIterator) -> *mut Effect;
}
extern "C" {
    pub fn EffectVectorIterator_equal(
        lhs: *mut EffectVectorIterator,
        rhs: *mut EffectVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn EffectVectorIterator_not_equal(
        lhs: *mut EffectVectorIterator,
        rhs: *mut EffectVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn EffectVectorIterator_destroy(self_: *mut EffectVectorIterator);
}
extern "C" {
    pub static mut MarkerColor_pink: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_red: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_orange: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_yellow: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_green: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_cyan: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_blue: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_purple: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_magenta: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_black: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut MarkerColor_white: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetainerMarker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Marker {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RetainerMarker_create(obj: *mut Marker) -> *mut RetainerMarker;
}
extern "C" {
    pub fn RetainerMarker_take_value(self_: *mut RetainerMarker) -> *mut Marker;
}
extern "C" {
    pub fn RetainerMarker_value(self_: *mut RetainerMarker) -> *mut Marker;
}
extern "C" {
    pub fn RetainerMarker_managed_destroy(self_: *mut RetainerMarker);
}
extern "C" {
    pub fn Marker_create(
        name: *const ::std::os::raw::c_char,
        marked_range: OptionalTimeRange,
        color: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut Marker;
}
extern "C" {
    pub fn Marker_color(self_: *mut Marker) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Marker_set_color(self_: *mut Marker, color: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Marker_marked_range(self_: *mut Marker) -> TimeRange;
}
extern "C" {
    pub fn Marker_set_marked_range(self_: *mut Marker, marked_range: TimeRange);
}
extern "C" {
    pub fn Marker_name(self_: *mut Marker) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Marker_set_name(self_: *mut Marker, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Marker_metadata(self_: *mut Marker) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Marker_to_json_file(
        self_: *mut Marker,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Marker_to_json_string(
        self_: *mut Marker,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Marker_is_equivalent_to(self_: *mut Marker, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Marker_clone(self_: *mut Marker, error_status: *mut OTIOErrorStatus) -> *mut Marker;
}
extern "C" {
    pub fn Marker_schema_name(self_: *mut Marker) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Marker_schema_version(self_: *mut Marker) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkerRetainerVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkerRetainerVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn MarkerRetainerVector_create() -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn MarkerRetainerVector_destroy(self_: *mut MarkerRetainerVector);
}
extern "C" {
    pub fn MarkerRetainerVector_begin(
        self_: *mut MarkerRetainerVector,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVector_end(
        self_: *mut MarkerRetainerVector,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVector_size(self_: *mut MarkerRetainerVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerRetainerVector_max_size(self_: *mut MarkerRetainerVector)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerRetainerVector_capacity(self_: *mut MarkerRetainerVector)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerRetainerVector_resize(self_: *mut MarkerRetainerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MarkerRetainerVector_empty(self_: *mut MarkerRetainerVector) -> bool;
}
extern "C" {
    pub fn MarkerRetainerVector_shrink_to_fit(self_: *mut MarkerRetainerVector);
}
extern "C" {
    pub fn MarkerRetainerVector_reserve(self_: *mut MarkerRetainerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MarkerRetainerVector_swap(
        self_: *mut MarkerRetainerVector,
        other: *mut MarkerRetainerVector,
    );
}
extern "C" {
    pub fn MarkerRetainerVector_at(
        self_: *mut MarkerRetainerVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut RetainerMarker;
}
extern "C" {
    pub fn MarkerRetainerVector_push_back(
        self_: *mut MarkerRetainerVector,
        value: *mut RetainerMarker,
    );
}
extern "C" {
    pub fn MarkerRetainerVector_pop_back(self_: *mut MarkerRetainerVector);
}
extern "C" {
    pub fn MarkerRetainerVector_insert(
        self_: *mut MarkerRetainerVector,
        pos: *mut MarkerRetainerVectorIterator,
        val: *mut RetainerMarker,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVector_clear(self_: *mut MarkerRetainerVector);
}
extern "C" {
    pub fn MarkerRetainerVector_erase(
        self_: *mut MarkerRetainerVector,
        pos: *mut MarkerRetainerVectorIterator,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVector_erase_range(
        self_: *mut MarkerRetainerVector,
        first: *mut MarkerRetainerVectorIterator,
        last: *mut MarkerRetainerVectorIterator,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_advance(
        iter: *mut MarkerRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_next(
        iter: *mut MarkerRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_prev(
        iter: *mut MarkerRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MarkerRetainerVectorIterator;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_value(
        iter: *mut MarkerRetainerVectorIterator,
    ) -> *mut RetainerMarker;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_equal(
        lhs: *mut MarkerRetainerVectorIterator,
        rhs: *mut MarkerRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_not_equal(
        lhs: *mut MarkerRetainerVectorIterator,
        rhs: *mut MarkerRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn MarkerRetainerVectorIterator_destroy(self_: *mut MarkerRetainerVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkerVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MarkerVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn MarkerVector_create() -> *mut MarkerVector;
}
extern "C" {
    pub fn MarkerVector_destroy(self_: *mut MarkerVector);
}
extern "C" {
    pub fn MarkerVector_begin(self_: *mut MarkerVector) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVector_end(self_: *mut MarkerVector) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVector_size(self_: *mut MarkerVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerVector_max_size(self_: *mut MarkerVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerVector_capacity(self_: *mut MarkerVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MarkerVector_resize(self_: *mut MarkerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MarkerVector_empty(self_: *mut MarkerVector) -> bool;
}
extern "C" {
    pub fn MarkerVector_shrink_to_fit(self_: *mut MarkerVector);
}
extern "C" {
    pub fn MarkerVector_reserve(self_: *mut MarkerVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn MarkerVector_swap(self_: *mut MarkerVector, other: *mut MarkerVector);
}
extern "C" {
    pub fn MarkerVector_at(self_: *mut MarkerVector, pos: ::std::os::raw::c_int) -> *mut Marker;
}
extern "C" {
    pub fn MarkerVector_push_back(self_: *mut MarkerVector, value: *mut Marker);
}
extern "C" {
    pub fn MarkerVector_pop_back(self_: *mut MarkerVector);
}
extern "C" {
    pub fn MarkerVector_insert(
        self_: *mut MarkerVector,
        pos: *mut MarkerVectorIterator,
        val: *mut Marker,
    ) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVector_clear(self_: *mut MarkerVector);
}
extern "C" {
    pub fn MarkerVector_erase(
        self_: *mut MarkerVector,
        pos: *mut MarkerVectorIterator,
    ) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVector_erase_range(
        self_: *mut MarkerVector,
        first: *mut MarkerVectorIterator,
        last: *mut MarkerVectorIterator,
    ) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVectorIterator_advance(
        iter: *mut MarkerVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn MarkerVectorIterator_next(
        iter: *mut MarkerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVectorIterator_prev(
        iter: *mut MarkerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MarkerVectorIterator;
}
extern "C" {
    pub fn MarkerVectorIterator_value(iter: *mut MarkerVectorIterator) -> *mut Marker;
}
extern "C" {
    pub fn MarkerVectorIterator_equal(
        lhs: *mut MarkerVectorIterator,
        rhs: *mut MarkerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn MarkerVectorIterator_not_equal(
        lhs: *mut MarkerVectorIterator,
        rhs: *mut MarkerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn MarkerVectorIterator_destroy(self_: *mut MarkerVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Item {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Item_create(
        name: *const ::std::os::raw::c_char,
        source_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
        effects: *mut EffectVector,
        markers: *mut MarkerVector,
    ) -> *mut Item;
}
extern "C" {
    pub fn Item_visible(self_: *mut Item) -> bool;
}
extern "C" {
    pub fn Item_overlapping(self_: *mut Item) -> bool;
}
extern "C" {
    pub fn Item_source_range(self_: *mut Item) -> OptionalTimeRange;
}
extern "C" {
    pub fn Item_set_source_range(self_: *mut Item, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Item_effects(self_: *mut Item) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Item_markers(self_: *mut Item) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Item_duration(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> RationalTime;
}
extern "C" {
    pub fn Item_available_range(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Item_trimmed_range(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Item_visible_range(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Item_trimmed_range_in_parent(
        self_: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Item_range_in_parent(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Item_transformed_time(
        self_: *mut Item,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Item_transformed_time_range(
        self_: *mut Item,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Item_parent(self_: *mut Item) -> *mut Composition;
}
extern "C" {
    pub fn Item_name(self_: *mut Item) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Item_metadata(self_: *mut Item) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Item_set_name(self_: *mut Item, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Item_to_json_file(
        self_: *mut Item,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Item_to_json_string(
        self_: *mut Item,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Item_is_equivalent_to(self_: *mut Item, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Item_clone(self_: *mut Item, error_status: *mut OTIOErrorStatus) -> *mut Item;
}
extern "C" {
    pub fn Item_schema_name(self_: *mut Item) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Item_schema_version(self_: *mut Item) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapComposableTimeRangeIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MapComposableTimeRange {
    _unused: [u8; 0],
}
extern "C" {
    pub fn MapComposableTimeRange_create() -> *mut MapComposableTimeRange;
}
extern "C" {
    pub fn MapComposableTimeRange_destroy(self_: *mut MapComposableTimeRange);
}
extern "C" {
    pub fn MapComposableTimeRange_clear(self_: *mut MapComposableTimeRange);
}
extern "C" {
    pub fn MapComposableTimeRange_begin(
        self_: *mut MapComposableTimeRange,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRange_end(
        self_: *mut MapComposableTimeRange,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRange_swap(
        self_: *mut MapComposableTimeRange,
        other: *mut MapComposableTimeRange,
    );
}
extern "C" {
    pub fn MapComposableTimeRange_erase(
        self_: *mut MapComposableTimeRange,
        pos: *mut MapComposableTimeRangeIterator,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRange_erase_range(
        self_: *mut MapComposableTimeRange,
        first: *mut MapComposableTimeRangeIterator,
        last: *mut MapComposableTimeRangeIterator,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRange_erase_key(
        self_: *mut MapComposableTimeRange,
        key: *mut Composable,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MapComposableTimeRange_size(self_: *mut MapComposableTimeRange)
        -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MapComposableTimeRange_max_size(
        self_: *mut MapComposableTimeRange,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn MapComposableTimeRange_empty(self_: *mut MapComposableTimeRange) -> bool;
}
extern "C" {
    pub fn MapComposableTimeRange_find(
        self_: *mut MapComposableTimeRange,
        key: *mut Composable,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRange_insert(
        self_: *mut MapComposableTimeRange,
        key: *mut Composable,
        anyObj: TimeRange,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_advance(
        iter: *mut MapComposableTimeRangeIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_next(
        iter: *mut MapComposableTimeRangeIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_prev(
        iter: *mut MapComposableTimeRangeIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut MapComposableTimeRangeIterator;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_value(
        iter: *mut MapComposableTimeRangeIterator,
    ) -> TimeRange;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_equal(
        lhs: *mut MapComposableTimeRangeIterator,
        rhs: *mut MapComposableTimeRangeIterator,
    ) -> bool;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_not_equal(
        lhs: *mut MapComposableTimeRangeIterator,
        rhs: *mut MapComposableTimeRangeIterator,
    ) -> bool;
}
extern "C" {
    pub fn MapComposableTimeRangeIterator_destroy(self_: *mut MapComposableTimeRangeIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OptionalPairRationalTime {
    _unused: [u8; 0],
}
extern "C" {
    pub fn OptionalPairRationalTime_create(
        first: OptionalRationalTime,
        second: OptionalRationalTime,
    ) -> *mut OptionalPairRationalTime;
}
extern "C" {
    pub fn OptionalPairRationalTime_first(
        self_: *mut OptionalPairRationalTime,
    ) -> OptionalRationalTime;
}
extern "C" {
    pub fn OptionalPairRationalTime_second(
        self_: *mut OptionalPairRationalTime,
    ) -> OptionalRationalTime;
}
extern "C" {
    pub fn OptionalPairRationalTime_destroy(self_: *mut OptionalPairRationalTime);
}
extern "C" {
    pub fn Composition_create(
        name: *const ::std::os::raw::c_char,
        source_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
        effects: *mut EffectVector,
        markers: *mut MarkerVector,
    ) -> *mut Composition;
}
extern "C" {
    pub fn Composition_composition_kind(self_: *mut Composition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composition_children(self_: *mut Composition) -> *mut ComposableRetainerVector;
}
extern "C" {
    pub fn Composition_clear_children(self_: *mut Composition);
}
extern "C" {
    pub fn Composition_set_children(
        self_: *mut Composition,
        children: *mut ComposableVector,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Composition_insert_child(
        self_: *mut Composition,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Composition_set_child(
        self_: *mut Composition,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Composition_remove_child(
        self_: *mut Composition,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Composition_append_child(
        self_: *mut Composition,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Composition_is_parent_of(self_: *mut Composition, other: *mut Composable) -> bool;
}
extern "C" {
    pub fn Composition_handles_of_child(
        self_: *mut Composition,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OptionalPairRationalTime;
}
extern "C" {
    pub fn Composition_range_of_child_at_index(
        self_: *mut Composition,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_trimmed_range_of_child_at_index(
        self_: *mut Composition,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_range_of_child(
        self_: *mut Composition,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_trimmed_range_of_child(
        self_: *mut Composition,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Composition_trim_child_range(
        self_: *mut Composition,
        child_range: TimeRange,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Composition_has_child(self_: *mut Composition, child: *mut Composable) -> bool;
}
extern "C" {
    pub fn Composition_range_of_all_children(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut MapComposableTimeRange;
}
extern "C" {
    pub fn Composition_visible(self_: *mut Composition) -> bool;
}
extern "C" {
    pub fn Composition_overlapping(self_: *mut Composition) -> bool;
}
extern "C" {
    pub fn Composition_source_range(self_: *mut Composition) -> OptionalTimeRange;
}
extern "C" {
    pub fn Composition_set_source_range(self_: *mut Composition, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Composition_effects(self_: *mut Composition) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Composition_markers(self_: *mut Composition) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Composition_duration(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Composition_available_range(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_trimmed_range(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_visible_range(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_trimmed_range_in_parent(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Composition_range_in_parent(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_transformed_time(
        self_: *mut Composition,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Composition_transformed_time_range(
        self_: *mut Composition,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Composition_parent(self_: *mut Composition) -> *mut Composition;
}
extern "C" {
    pub fn Composition_name(self_: *mut Composition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composition_metadata(self_: *mut Composition) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Composition_set_name(self_: *mut Composition, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Composition_to_json_file(
        self_: *mut Composition,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Composition_to_json_string(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composition_is_equivalent_to(
        self_: *mut Composition,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn Composition_clone(
        self_: *mut Composition,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Composition;
}
extern "C" {
    pub fn Composition_schema_name(self_: *mut Composition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Composition_schema_version(self_: *mut Composition) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MediaReference {
    _unused: [u8; 0],
}
extern "C" {
    pub fn MediaReference_create(
        name: *const ::std::os::raw::c_char,
        available_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
    ) -> *mut MediaReference;
}
extern "C" {
    pub fn MediaReference_available_range(self_: *mut MediaReference) -> OptionalTimeRange;
}
extern "C" {
    pub fn MediaReference_set_available_range(
        self_: *mut MediaReference,
        available_range: OptionalTimeRange,
    );
}
extern "C" {
    pub fn MediaReference_is_missing_reference(self_: *mut MediaReference) -> bool;
}
extern "C" {
    pub fn MediaReference_name(self_: *mut MediaReference) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MediaReference_set_name(self_: *mut MediaReference, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn MediaReference_metadata(self_: *mut MediaReference) -> *mut AnyDictionary;
}
extern "C" {
    pub fn MediaReference_to_json_file(
        self_: *mut MediaReference,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn MediaReference_to_json_string(
        self_: *mut MediaReference,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MediaReference_is_equivalent_to(
        self_: *mut MediaReference,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn MediaReference_clone(
        self_: *mut MediaReference,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut MediaReference;
}
extern "C" {
    pub fn MediaReference_schema_name(self_: *mut MediaReference) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MediaReference_schema_version(self_: *mut MediaReference) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clip {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Clip_create(
        name: *const ::std::os::raw::c_char,
        media_reference: *mut MediaReference,
        source_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
    ) -> *mut Clip;
}
extern "C" {
    pub fn Clip_set_media_reference(self_: *mut Clip, media_reference: *mut MediaReference);
}
extern "C" {
    pub fn Clip_media_reference(self_: *mut Clip) -> *mut MediaReference;
}
extern "C" {
    pub fn Clip_available_range(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Clip_source_range(self_: *mut Clip) -> OptionalTimeRange;
}
extern "C" {
    pub fn Clip_set_source_range(self_: *mut Clip, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Clip_effects(self_: *mut Clip) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Clip_markers(self_: *mut Clip) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Clip_duration(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> RationalTime;
}
extern "C" {
    pub fn Clip_trimmed_range(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Clip_visible_range(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Clip_trimmed_range_in_parent(
        self_: *mut Clip,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Clip_range_in_parent(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Clip_transformed_time(
        self_: *mut Clip,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Clip_transformed_time_range(
        self_: *mut Clip,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Clip_visible(self_: *mut Clip) -> bool;
}
extern "C" {
    pub fn Clip_overlapping(self_: *mut Clip) -> bool;
}
extern "C" {
    pub fn Clip_parent(self_: *mut Clip) -> *mut Composition;
}
extern "C" {
    pub fn Clip_name(self_: *mut Clip) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Clip_metadata(self_: *mut Clip) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Clip_set_name(self_: *mut Clip, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Clip_to_json_file(
        self_: *mut Clip,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Clip_to_json_string(
        self_: *mut Clip,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Clip_is_equivalent_to(self_: *mut Clip, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Clip_clone(self_: *mut Clip, error_status: *mut OTIOErrorStatus) -> *mut Clip;
}
extern "C" {
    pub fn Clip_schema_name(self_: *mut Clip) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Clip_schema_version(self_: *mut Clip) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn deserialize_json_from_string(
        input: *const ::std::os::raw::c_char,
        destination: *mut Any,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn deserialize_json_from_file(
        file_name: *const ::std::os::raw::c_char,
        destination: *mut Any,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExternalReference {
    _unused: [u8; 0],
}
extern "C" {
    pub fn ExternalReference_create(
        target_url: *const ::std::os::raw::c_char,
        available_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
    ) -> *mut ExternalReference;
}
extern "C" {
    pub fn ExternalReference_target_url(
        self_: *mut ExternalReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ExternalReference_set_target_url(
        self_: *mut ExternalReference,
        target_url: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ExternalReference_available_range(self_: *mut ExternalReference) -> OptionalTimeRange;
}
extern "C" {
    pub fn ExternalReference_set_available_range(
        self_: *mut ExternalReference,
        available_range: OptionalTimeRange,
    );
}
extern "C" {
    pub fn ExternalReference_is_missing_reference(self_: *mut ExternalReference) -> bool;
}
extern "C" {
    pub fn ExternalReference_name(self_: *mut ExternalReference) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ExternalReference_set_name(
        self_: *mut ExternalReference,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn ExternalReference_metadata(self_: *mut ExternalReference) -> *mut AnyDictionary;
}
extern "C" {
    pub fn ExternalReference_to_json_file(
        self_: *mut ExternalReference,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn ExternalReference_to_json_string(
        self_: *mut ExternalReference,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ExternalReference_is_equivalent_to(
        self_: *mut ExternalReference,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn ExternalReference_clone(
        self_: *mut ExternalReference,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut ExternalReference;
}
extern "C" {
    pub fn ExternalReference_schema_name(
        self_: *mut ExternalReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn ExternalReference_schema_version(self_: *mut ExternalReference)
        -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FreezeFrame {
    _unused: [u8; 0],
}
extern "C" {
    pub fn FreezeFrame_create(
        name: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut FreezeFrame;
}
extern "C" {
    pub fn FreezeFrame_time_scalar(self_: *mut FreezeFrame) -> f64;
}
extern "C" {
    pub fn FreezeFrame_set_time_scalar(self_: *mut FreezeFrame, time_scalar: f64);
}
extern "C" {
    pub fn FreezeFrame_effect_name(self_: *mut FreezeFrame) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FreezeFrame_set_effect_name(
        self_: *mut FreezeFrame,
        effect_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn FreezeFrame_name(self_: *mut FreezeFrame) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FreezeFrame_set_name(self_: *mut FreezeFrame, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn FreezeFrame_metadata(self_: *mut FreezeFrame) -> *mut AnyDictionary;
}
extern "C" {
    pub fn FreezeFrame_to_json_file(
        self_: *mut FreezeFrame,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn FreezeFrame_to_json_string(
        self_: *mut FreezeFrame,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FreezeFrame_is_equivalent_to(
        self_: *mut FreezeFrame,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn FreezeFrame_clone(
        self_: *mut FreezeFrame,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut FreezeFrame;
}
extern "C" {
    pub fn FreezeFrame_schema_name(self_: *mut FreezeFrame) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn FreezeFrame_schema_version(self_: *mut FreezeFrame) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Gap {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Gap_create_with_source_range(
        source_range: OptionalTimeRange,
        name: *const ::std::os::raw::c_char,
        effects: *mut EffectVector,
        markers: *mut MarkerVector,
        metadata: *mut AnyDictionary,
    ) -> *mut Gap;
}
extern "C" {
    pub fn Gap_create_with_duration(
        duration: OptionalRationalTime,
        name: *const ::std::os::raw::c_char,
        effects: *mut EffectVector,
        markers: *mut MarkerVector,
        metadata: *mut AnyDictionary,
    ) -> *mut Gap;
}
extern "C" {
    pub fn Gap_visible(self_: *mut Gap) -> bool;
}
extern "C" {
    pub fn Gap_overlapping(self_: *mut Gap) -> bool;
}
extern "C" {
    pub fn Gap_source_range(self_: *mut Gap) -> OptionalTimeRange;
}
extern "C" {
    pub fn Gap_set_source_range(self_: *mut Gap, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Gap_effects(self_: *mut Gap) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Gap_markers(self_: *mut Gap) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Gap_duration(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> RationalTime;
}
extern "C" {
    pub fn Gap_available_range(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Gap_trimmed_range(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Gap_visible_range(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Gap_trimmed_range_in_parent(
        self_: *mut Gap,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Gap_range_in_parent(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Gap_transformed_time(
        self_: *mut Gap,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Gap_transformed_time_range(
        self_: *mut Gap,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Gap_parent(self_: *mut Gap) -> *mut Composition;
}
extern "C" {
    pub fn Gap_name(self_: *mut Gap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gap_metadata(self_: *mut Gap) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Gap_set_name(self_: *mut Gap, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Gap_to_json_file(
        self_: *mut Gap,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Gap_to_json_string(
        self_: *mut Gap,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gap_is_equivalent_to(self_: *mut Gap, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Gap_clone(self_: *mut Gap, error_status: *mut OTIOErrorStatus) -> *mut Gap;
}
extern "C" {
    pub fn Gap_schema_name(self_: *mut Gap) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Gap_schema_version(self_: *mut Gap) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GeneratorReference {
    _unused: [u8; 0],
}
extern "C" {
    pub fn GeneratorReference_create(
        name: *const ::std::os::raw::c_char,
        generator_kind: *const ::std::os::raw::c_char,
        available_range: OptionalTimeRange,
        parameters: *mut AnyDictionary,
        metadata: *mut AnyDictionary,
    ) -> *mut GeneratorReference;
}
extern "C" {
    pub fn GeneratorReference_generator_kind(
        self_: *mut GeneratorReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GeneratorReference_set_generator_kind(
        self_: *mut GeneratorReference,
        generator_kind: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn GeneratorReference_parameters(self_: *mut GeneratorReference) -> *mut AnyDictionary;
}
extern "C" {
    pub fn GeneratorReference_available_range(self_: *mut GeneratorReference) -> OptionalTimeRange;
}
extern "C" {
    pub fn GeneratorReference_set_available_range(
        self_: *mut GeneratorReference,
        available_range: OptionalTimeRange,
    );
}
extern "C" {
    pub fn GeneratorReference_is_missing_reference(self_: *mut GeneratorReference) -> bool;
}
extern "C" {
    pub fn GeneratorReference_name(self_: *mut GeneratorReference)
        -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GeneratorReference_set_name(
        self_: *mut GeneratorReference,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn GeneratorReference_metadata(self_: *mut GeneratorReference) -> *mut AnyDictionary;
}
extern "C" {
    pub fn GeneratorReference_to_json_file(
        self_: *mut GeneratorReference,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn GeneratorReference_to_json_string(
        self_: *mut GeneratorReference,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GeneratorReference_is_equivalent_to(
        self_: *mut GeneratorReference,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn GeneratorReference_clone(
        self_: *mut GeneratorReference,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut GeneratorReference;
}
extern "C" {
    pub fn GeneratorReference_schema_name(
        self_: *mut GeneratorReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn GeneratorReference_schema_version(
        self_: *mut GeneratorReference,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LinearTimeWarp {
    _unused: [u8; 0],
}
extern "C" {
    pub fn LinearTimeWarp_create(
        name: *const ::std::os::raw::c_char,
        effect_name: *const ::std::os::raw::c_char,
        time_scalar: f64,
        metadata: *mut AnyDictionary,
    ) -> *mut LinearTimeWarp;
}
extern "C" {
    pub fn LinearTimeWarp_time_scalar(self_: *mut LinearTimeWarp) -> f64;
}
extern "C" {
    pub fn LinearTimeWarp_set_time_scalar(self_: *mut LinearTimeWarp, time_scalar: f64);
}
extern "C" {
    pub fn LinearTimeWarp_effect_name(self_: *mut LinearTimeWarp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn LinearTimeWarp_set_effect_name(
        self_: *mut LinearTimeWarp,
        effect_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn LinearTimeWarp_name(self_: *mut LinearTimeWarp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn LinearTimeWarp_set_name(self_: *mut LinearTimeWarp, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn LinearTimeWarp_metadata(self_: *mut LinearTimeWarp) -> *mut AnyDictionary;
}
extern "C" {
    pub fn LinearTimeWarp_to_json_file(
        self_: *mut LinearTimeWarp,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn LinearTimeWarp_to_json_string(
        self_: *mut LinearTimeWarp,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn LinearTimeWarp_is_equivalent_to(
        self_: *mut LinearTimeWarp,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn LinearTimeWarp_clone(
        self_: *mut LinearTimeWarp,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut LinearTimeWarp;
}
extern "C" {
    pub fn LinearTimeWarp_schema_name(self_: *mut LinearTimeWarp) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn LinearTimeWarp_schema_version(self_: *mut LinearTimeWarp) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MissingReference {
    _unused: [u8; 0],
}
extern "C" {
    pub fn MissingReference_create(
        name: *const ::std::os::raw::c_char,
        available_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
    ) -> *mut MissingReference;
}
extern "C" {
    pub fn MissingReference_is_missing_reference(self_: *mut MissingReference) -> bool;
}
extern "C" {
    pub fn MissingReference_available_range(self_: *mut MissingReference) -> OptionalTimeRange;
}
extern "C" {
    pub fn MissingReference_set_available_range(
        self_: *mut MissingReference,
        available_range: OptionalTimeRange,
    );
}
extern "C" {
    pub fn MissingReference_name(self_: *mut MissingReference) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MissingReference_set_name(
        self_: *mut MissingReference,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn MissingReference_metadata(self_: *mut MissingReference) -> *mut AnyDictionary;
}
extern "C" {
    pub fn MissingReference_to_json_file(
        self_: *mut MissingReference,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn MissingReference_to_json_string(
        self_: *mut MissingReference,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MissingReference_is_equivalent_to(
        self_: *mut MissingReference,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn MissingReference_clone(
        self_: *mut MissingReference,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut MissingReference;
}
extern "C" {
    pub fn MissingReference_schema_name(
        self_: *mut MissingReference,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn MissingReference_schema_version(self_: *mut MissingReference) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetainerPairComposable {
    _unused: [u8; 0],
}
extern "C" {
    pub fn RetainerPairComposable_create(
        first: *mut RetainerComposable,
        second: *mut RetainerComposable,
    ) -> *mut RetainerPairComposable;
}
extern "C" {
    pub fn RetainerPairComposable_first(
        self_: *mut RetainerPairComposable,
    ) -> *mut RetainerComposable;
}
extern "C" {
    pub fn RetainerPairComposable_second(
        self_: *mut RetainerPairComposable,
    ) -> *mut RetainerComposable;
}
extern "C" {
    pub fn RetainerPairComposable_destroy(self_: *mut RetainerPairComposable);
}
pub type int_least8_t = ::std::os::raw::c_schar;
pub type int_least16_t = ::std::os::raw::c_short;
pub type int_least32_t = ::std::os::raw::c_int;
pub type int_least64_t = ::std::os::raw::c_long;
pub type uint_least8_t = ::std::os::raw::c_uchar;
pub type uint_least16_t = ::std::os::raw::c_ushort;
pub type uint_least32_t = ::std::os::raw::c_uint;
pub type uint_least64_t = ::std::os::raw::c_ulong;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = ::std::os::raw::c_long;
pub type uintmax_t = ::std::os::raw::c_ulong;
extern "C" {
    pub fn create_safely_typed_any_bool(boolValue: bool) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_int(intValue: ::std::os::raw::c_int) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_int64(int64Value: i64) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_double(doubleValue: f64) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_string(stringValue: *const ::std::os::raw::c_char) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_rational_time(rationalTimeValue: RationalTime) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_time_range(timeRangeValue: TimeRange) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_time_transform(timeTransformValue: TimeTransform) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_any_vector(anyVectorValue: *mut AnyVector) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_any_dictionary(
        anyDictionaryValue: *mut AnyDictionary,
    ) -> *mut Any;
}
extern "C" {
    pub fn create_safely_typed_any_serializable_object(
        serializableObjectValue: *mut OTIOSerializableObject,
    ) -> *mut Any;
}
extern "C" {
    pub fn safely_cast_bool_any(a: *mut Any) -> bool;
}
extern "C" {
    pub fn safely_cast_int_any(a: *mut Any) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn safely_cast_int64_any(a: *mut Any) -> i64;
}
extern "C" {
    pub fn safely_cast_double_any(a: *mut Any) -> f64;
}
extern "C" {
    pub fn safely_cast_string_any(a: *mut Any) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn safely_cast_rational_time_any(a: *mut Any) -> RationalTime;
}
extern "C" {
    pub fn safely_cast_time_range_any(a: *mut Any) -> TimeRange;
}
extern "C" {
    pub fn safely_cast_time_transform_any(a: *mut Any) -> TimeTransform;
}
extern "C" {
    pub fn safely_cast_retainer_any(a: *mut Any) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn safely_cast_any_dictionary_any(a: *mut Any) -> *mut AnyDictionary;
}
extern "C" {
    pub fn safely_cast_any_vector_any(a: *mut Any) -> *mut AnyVector;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableObjectRetainerVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableObjectRetainerVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SerializableObjectRetainerVector_create() -> *mut SerializableObjectRetainerVector;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_destroy(self_: *mut SerializableObjectRetainerVector);
}
extern "C" {
    pub fn SerializableObjectRetainerVector_begin(
        self_: *mut SerializableObjectRetainerVector,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_end(
        self_: *mut SerializableObjectRetainerVector,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_size(
        self_: *mut SerializableObjectRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_max_size(
        self_: *mut SerializableObjectRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_capacity(
        self_: *mut SerializableObjectRetainerVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_resize(
        self_: *mut SerializableObjectRetainerVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVector_empty(
        self_: *mut SerializableObjectRetainerVector,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_shrink_to_fit(
        self_: *mut SerializableObjectRetainerVector,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVector_reserve(
        self_: *mut SerializableObjectRetainerVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVector_swap(
        self_: *mut SerializableObjectRetainerVector,
        other: *mut SerializableObjectRetainerVector,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVector_at(
        self_: *mut SerializableObjectRetainerVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut RetainerSerializableObject;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_push_back(
        self_: *mut SerializableObjectRetainerVector,
        value: *mut RetainerSerializableObject,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVector_pop_back(self_: *mut SerializableObjectRetainerVector);
}
extern "C" {
    pub fn SerializableObjectRetainerVector_insert(
        self_: *mut SerializableObjectRetainerVector,
        pos: *mut SerializableObjectRetainerVectorIterator,
        val: *mut RetainerSerializableObject,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_clear(self_: *mut SerializableObjectRetainerVector);
}
extern "C" {
    pub fn SerializableObjectRetainerVector_erase(
        self_: *mut SerializableObjectRetainerVector,
        pos: *mut SerializableObjectRetainerVectorIterator,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVector_erase_range(
        self_: *mut SerializableObjectRetainerVector,
        first: *mut SerializableObjectRetainerVectorIterator,
        last: *mut SerializableObjectRetainerVectorIterator,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_advance(
        iter: *mut SerializableObjectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_next(
        iter: *mut SerializableObjectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_prev(
        iter: *mut SerializableObjectRetainerVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut SerializableObjectRetainerVectorIterator;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_value(
        iter: *mut SerializableObjectRetainerVectorIterator,
    ) -> *mut RetainerSerializableObject;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_equal(
        lhs: *mut SerializableObjectRetainerVectorIterator,
        rhs: *mut SerializableObjectRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_not_equal(
        lhs: *mut SerializableObjectRetainerVectorIterator,
        rhs: *mut SerializableObjectRetainerVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectRetainerVectorIterator_destroy(
        self_: *mut SerializableObjectRetainerVectorIterator,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableObjectVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableObjectVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SerializableObjectVector_create() -> *mut SerializableObjectVector;
}
extern "C" {
    pub fn SerializableObjectVector_destroy(self_: *mut SerializableObjectVector);
}
extern "C" {
    pub fn SerializableObjectVector_begin(
        self_: *mut SerializableObjectVector,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVector_end(
        self_: *mut SerializableObjectVector,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVector_size(
        self_: *mut SerializableObjectVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectVector_max_size(
        self_: *mut SerializableObjectVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectVector_capacity(
        self_: *mut SerializableObjectVector,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn SerializableObjectVector_resize(
        self_: *mut SerializableObjectVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectVector_empty(self_: *mut SerializableObjectVector) -> bool;
}
extern "C" {
    pub fn SerializableObjectVector_shrink_to_fit(self_: *mut SerializableObjectVector);
}
extern "C" {
    pub fn SerializableObjectVector_reserve(
        self_: *mut SerializableObjectVector,
        n: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectVector_swap(
        self_: *mut SerializableObjectVector,
        other: *mut SerializableObjectVector,
    );
}
extern "C" {
    pub fn SerializableObjectVector_at(
        self_: *mut SerializableObjectVector,
        pos: ::std::os::raw::c_int,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObjectVector_push_back(
        self_: *mut SerializableObjectVector,
        value: *mut OTIOSerializableObject,
    );
}
extern "C" {
    pub fn SerializableObjectVector_pop_back(self_: *mut SerializableObjectVector);
}
extern "C" {
    pub fn SerializableObjectVector_insert(
        self_: *mut SerializableObjectVector,
        pos: *mut SerializableObjectVectorIterator,
        val: *mut OTIOSerializableObject,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVector_clear(self_: *mut SerializableObjectVector);
}
extern "C" {
    pub fn SerializableObjectVector_erase(
        self_: *mut SerializableObjectVector,
        pos: *mut SerializableObjectVectorIterator,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVector_erase_range(
        self_: *mut SerializableObjectVector,
        first: *mut SerializableObjectVectorIterator,
        last: *mut SerializableObjectVectorIterator,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_advance(
        iter: *mut SerializableObjectVectorIterator,
        dist: ::std::os::raw::c_int,
    );
}
extern "C" {
    pub fn SerializableObjectVectorIterator_next(
        iter: *mut SerializableObjectVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_prev(
        iter: *mut SerializableObjectVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut SerializableObjectVectorIterator;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_value(
        iter: *mut SerializableObjectVectorIterator,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_equal(
        lhs: *mut SerializableObjectVectorIterator,
        rhs: *mut SerializableObjectVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_not_equal(
        lhs: *mut SerializableObjectVectorIterator,
        rhs: *mut SerializableObjectVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectVectorIterator_destroy(self_: *mut SerializableObjectVectorIterator);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableCollection {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SerializableCollection_create(
        name: *const ::std::os::raw::c_char,
        children: *mut SerializableObjectVector,
        metadata: *mut AnyDictionary,
    ) -> *mut SerializableCollection;
}
extern "C" {
    pub fn SerializableCollection_children(
        self_: *mut SerializableCollection,
    ) -> *mut SerializableObjectRetainerVector;
}
extern "C" {
    pub fn SerializableCollection_set_children(
        self_: *mut SerializableCollection,
        children: *mut SerializableObjectVector,
    );
}
extern "C" {
    pub fn SerializableCollection_clear_children(self_: *mut SerializableCollection);
}
extern "C" {
    pub fn SerializableCollection_insert_child(
        self_: *mut SerializableCollection,
        index: ::std::os::raw::c_int,
        child: *mut OTIOSerializableObject,
    );
}
extern "C" {
    pub fn SerializableCollection_set_child(
        self_: *mut SerializableCollection,
        index: ::std::os::raw::c_int,
        child: *mut OTIOSerializableObject,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn SerializableCollection_remove_child(
        self_: *mut SerializableCollection,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn SerializableCollection_name(
        self_: *mut SerializableCollection,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableCollection_set_name(
        self_: *mut SerializableCollection,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn SerializableCollection_metadata(
        self_: *mut SerializableCollection,
    ) -> *mut AnyDictionary;
}
extern "C" {
    pub fn SerializableCollection_to_json_file(
        self_: *mut SerializableCollection,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn SerializableCollection_to_json_string(
        self_: *mut SerializableCollection,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableCollection_is_equivalent_to(
        self_: *mut SerializableCollection,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn SerializableCollection_clone(
        self_: *mut SerializableCollection,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut SerializableCollection;
}
extern "C" {
    pub fn SerializableCollection_schema_name(
        self_: *mut SerializableCollection,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableCollection_schema_version(
        self_: *mut SerializableCollection,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SerializableObjectWithMetadata {
    _unused: [u8; 0],
}
extern "C" {
    pub fn SerializableObjectWithMetadata_create(
        name: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut SerializableObjectWithMetadata;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_name(
        self_: *mut SerializableObjectWithMetadata,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_set_name(
        self_: *mut SerializableObjectWithMetadata,
        name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn SerializableObjectWithMetadata_metadata(
        self_: *mut SerializableObjectWithMetadata,
    ) -> *mut AnyDictionary;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_to_json_file(
        self_: *mut SerializableObjectWithMetadata,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_to_json_string(
        self_: *mut SerializableObjectWithMetadata,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_is_equivalent_to(
        self_: *mut SerializableObjectWithMetadata,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_clone(
        self_: *mut SerializableObjectWithMetadata,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut SerializableObjectWithMetadata;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_is_unknown_schema(
        self_: *mut SerializableObjectWithMetadata,
    ) -> bool;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_schema_name(
        self_: *mut SerializableObjectWithMetadata,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn SerializableObjectWithMetadata_schema_version(
        self_: *mut SerializableObjectWithMetadata,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn serialize_json_to_string(
        value: *mut Any,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn serialize_json_to_file(
        value: *mut Any,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Stack {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Stack_create(
        name: *const ::std::os::raw::c_char,
        source_range: OptionalTimeRange,
        metadata: *mut AnyDictionary,
        effects: *mut EffectVector,
        markers: *mut MarkerVector,
    ) -> *mut Stack;
}
extern "C" {
    pub fn Stack_range_of_child_at_index(
        self_: *mut Stack,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_trimmed_range_of_child_at_index(
        self_: *mut Stack,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_available_range(
        self_: *mut Stack,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_range_of_all_children(
        self_: *mut Stack,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut MapComposableTimeRange;
}
extern "C" {
    pub fn Stack_composition_kind(self_: *mut Stack) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Stack_children(self_: *mut Stack) -> *mut ComposableRetainerVector;
}
extern "C" {
    pub fn Stack_clear_children(self_: *mut Stack);
}
extern "C" {
    pub fn Stack_set_children(
        self_: *mut Stack,
        children: *mut ComposableVector,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Stack_insert_child(
        self_: *mut Stack,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Stack_set_child(
        self_: *mut Stack,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Stack_remove_child(
        self_: *mut Stack,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Stack_append_child(
        self_: *mut Stack,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Stack_is_parent_of(self_: *mut Stack, other: *mut Composable) -> bool;
}
extern "C" {
    pub fn Stack_handles_of_child(
        self_: *mut Stack,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OptionalPairRationalTime;
}
extern "C" {
    pub fn Stack_range_of_child(
        self_: *mut Stack,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_trimmed_range_of_child(
        self_: *mut Stack,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Stack_trim_child_range(self_: *mut Stack, child_range: TimeRange) -> OptionalTimeRange;
}
extern "C" {
    pub fn Stack_has_child(self_: *mut Stack, child: *mut Composable) -> bool;
}
extern "C" {
    pub fn Stack_visible(self_: *mut Stack) -> bool;
}
extern "C" {
    pub fn Stack_overlapping(self_: *mut Stack) -> bool;
}
extern "C" {
    pub fn Stack_source_range(self_: *mut Stack) -> OptionalTimeRange;
}
extern "C" {
    pub fn Stack_set_source_range(self_: *mut Stack, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Stack_effects(self_: *mut Stack) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Stack_markers(self_: *mut Stack) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Stack_duration(self_: *mut Stack, error_status: *mut OTIOErrorStatus) -> RationalTime;
}
extern "C" {
    pub fn Stack_trimmed_range(self_: *mut Stack, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Stack_visible_range(self_: *mut Stack, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Stack_trimmed_range_in_parent(
        self_: *mut Stack,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Stack_range_in_parent(
        self_: *mut Stack,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_transformed_time(
        self_: *mut Stack,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Stack_transformed_time_range(
        self_: *mut Stack,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Stack_parent(self_: *mut Stack) -> *mut Composition;
}
extern "C" {
    pub fn Stack_name(self_: *mut Stack) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Stack_metadata(self_: *mut Stack) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Stack_set_name(self_: *mut Stack, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Stack_to_json_file(
        self_: *mut Stack,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Stack_to_json_string(
        self_: *mut Stack,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Stack_is_equivalent_to(self_: *mut Stack, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Stack_clone(self_: *mut Stack, error_status: *mut OTIOErrorStatus) -> *mut Stack;
}
extern "C" {
    pub fn Stack_schema_name(self_: *mut Stack) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Stack_schema_version(self_: *mut Stack) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Track {
    _unused: [u8; 0],
}
pub const OTIO_Track_NeighbourGapPolicy__OTIO_Track_NeighbourGapPolicy_never:
    OTIO_Track_NeighbourGapPolicy_ = 0;
pub const OTIO_Track_NeighbourGapPolicy__OTIO_Track_NeighbourGapPolicy_around_transitions:
    OTIO_Track_NeighbourGapPolicy_ = 1;
pub type OTIO_Track_NeighbourGapPolicy_ = ::std::os::raw::c_uint;
pub type OTIO_Track_NeighbourGapPolicy = ::std::os::raw::c_int;
extern "C" {
    pub static mut TrackKind_Video: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut TrackKind_Audio: *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_create(
        name: *const ::std::os::raw::c_char,
        source_range: OptionalTimeRange,
        kind: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut Track;
}
extern "C" {
    pub fn Track_kind(self_: *mut Track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_set_kind(self_: *mut Track, kind: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Track_range_of_child_at_index(
        self_: *mut Track,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_trimmed_range_of_child_at_index(
        self_: *mut Track,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_available_range(
        self_: *mut Track,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_handles_of_child(
        self_: *mut Track,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OptionalPairRationalTime;
}
extern "C" {
    pub fn Track_neighbors_of(
        self_: *mut Track,
        item: *mut Composable,
        error_status: *mut OTIOErrorStatus,
        insert_gap: OTIO_Track_NeighbourGapPolicy,
    ) -> *mut RetainerPairComposable;
}
extern "C" {
    pub fn Track_each_clip(self_: *mut Track) -> *mut ComposableVector;
}
extern "C" {
    pub fn Track_range_of_all_children(
        self_: *mut Track,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut MapComposableTimeRange;
}
extern "C" {
    pub fn Track_composition_kind(self_: *mut Track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_children(self_: *mut Track) -> *mut ComposableRetainerVector;
}
extern "C" {
    pub fn Track_clear_children(self_: *mut Track);
}
extern "C" {
    pub fn Track_set_children(
        self_: *mut Track,
        children: *mut ComposableVector,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Track_insert_child(
        self_: *mut Track,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Track_set_child(
        self_: *mut Track,
        index: ::std::os::raw::c_int,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Track_remove_child(
        self_: *mut Track,
        index: ::std::os::raw::c_int,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Track_append_child(
        self_: *mut Track,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn Track_is_parent_of(self_: *mut Track, other: *mut Composable) -> bool;
}
extern "C" {
    pub fn Track_range_of_child(
        self_: *mut Track,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_trimmed_range_of_child(
        self_: *mut Track,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Track_trim_child_range(self_: *mut Track, child_range: TimeRange) -> OptionalTimeRange;
}
extern "C" {
    pub fn Track_has_child(self_: *mut Track, child: *mut Composable) -> bool;
}
extern "C" {
    pub fn Track_visible(self_: *mut Track) -> bool;
}
extern "C" {
    pub fn Track_overlapping(self_: *mut Track) -> bool;
}
extern "C" {
    pub fn Track_source_range(self_: *mut Track) -> OptionalTimeRange;
}
extern "C" {
    pub fn Track_set_source_range(self_: *mut Track, source_range: OptionalTimeRange);
}
extern "C" {
    pub fn Track_effects(self_: *mut Track) -> *mut EffectRetainerVector;
}
extern "C" {
    pub fn Track_markers(self_: *mut Track) -> *mut MarkerRetainerVector;
}
extern "C" {
    pub fn Track_duration(self_: *mut Track, error_status: *mut OTIOErrorStatus) -> RationalTime;
}
extern "C" {
    pub fn Track_trimmed_range(self_: *mut Track, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Track_visible_range(self_: *mut Track, error_status: *mut OTIOErrorStatus) -> TimeRange;
}
extern "C" {
    pub fn Track_trimmed_range_in_parent(
        self_: *mut Track,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Track_range_in_parent(
        self_: *mut Track,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_transformed_time(
        self_: *mut Track,
        time: RationalTime,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Track_transformed_time_range(
        self_: *mut Track,
        time_range: TimeRange,
        to_item: *mut Item,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Track_parent(self_: *mut Track) -> *mut Composition;
}
extern "C" {
    pub fn Track_name(self_: *mut Track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_metadata(self_: *mut Track) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Track_set_name(self_: *mut Track, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Track_to_json_file(
        self_: *mut Track,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Track_to_json_string(
        self_: *mut Track,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_is_equivalent_to(self_: *mut Track, other: *mut OTIOSerializableObject) -> bool;
}
extern "C" {
    pub fn Track_clone(self_: *mut Track, error_status: *mut OTIOErrorStatus) -> *mut Track;
}
extern "C" {
    pub fn Track_schema_name(self_: *mut Track) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Track_schema_version(self_: *mut Track) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrackVectorIterator {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TrackVector {
    _unused: [u8; 0],
}
extern "C" {
    pub fn TrackVector_create() -> *mut TrackVector;
}
extern "C" {
    pub fn TrackVector_destroy(self_: *mut TrackVector);
}
extern "C" {
    pub fn TrackVector_begin(self_: *mut TrackVector) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVector_end(self_: *mut TrackVector) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVector_size(self_: *mut TrackVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TrackVector_max_size(self_: *mut TrackVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TrackVector_capacity(self_: *mut TrackVector) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn TrackVector_resize(self_: *mut TrackVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TrackVector_empty(self_: *mut TrackVector) -> bool;
}
extern "C" {
    pub fn TrackVector_shrink_to_fit(self_: *mut TrackVector);
}
extern "C" {
    pub fn TrackVector_reserve(self_: *mut TrackVector, n: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TrackVector_swap(self_: *mut TrackVector, other: *mut TrackVector);
}
extern "C" {
    pub fn TrackVector_at(self_: *mut TrackVector, pos: ::std::os::raw::c_int) -> *mut Track;
}
extern "C" {
    pub fn TrackVector_push_back(self_: *mut TrackVector, value: *mut Track);
}
extern "C" {
    pub fn TrackVector_pop_back(self_: *mut TrackVector);
}
extern "C" {
    pub fn TrackVector_insert(
        self_: *mut TrackVector,
        pos: *mut TrackVectorIterator,
        val: *mut Track,
    ) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVector_clear(self_: *mut TrackVector);
}
extern "C" {
    pub fn TrackVector_erase(
        self_: *mut TrackVector,
        pos: *mut TrackVectorIterator,
    ) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVector_erase_range(
        self_: *mut TrackVector,
        first: *mut TrackVectorIterator,
        last: *mut TrackVectorIterator,
    ) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVectorIterator_advance(iter: *mut TrackVectorIterator, dist: ::std::os::raw::c_int);
}
extern "C" {
    pub fn TrackVectorIterator_next(
        iter: *mut TrackVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVectorIterator_prev(
        iter: *mut TrackVectorIterator,
        dist: ::std::os::raw::c_int,
    ) -> *mut TrackVectorIterator;
}
extern "C" {
    pub fn TrackVectorIterator_value(iter: *mut TrackVectorIterator) -> *mut Track;
}
extern "C" {
    pub fn TrackVectorIterator_equal(
        lhs: *mut TrackVectorIterator,
        rhs: *mut TrackVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn TrackVectorIterator_not_equal(
        lhs: *mut TrackVectorIterator,
        rhs: *mut TrackVectorIterator,
    ) -> bool;
}
extern "C" {
    pub fn TrackVectorIterator_destroy(self_: *mut TrackVectorIterator);
}
extern "C" {
    pub fn flatten_stack(in_stack: *mut Stack, error_status: *mut OTIOErrorStatus) -> *mut Track;
}
extern "C" {
    pub fn flatten_stack_track_vector(
        tracks: *mut TrackVector,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Track;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeEffect {
    _unused: [u8; 0],
}
extern "C" {
    pub fn TimeEffect_create(
        name: *const ::std::os::raw::c_char,
        effect_name: *const ::std::os::raw::c_char,
        metadata: *mut AnyDictionary,
    ) -> *mut TimeEffect;
}
extern "C" {
    pub fn TimeEffect_effect_name(self_: *mut TimeEffect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TimeEffect_set_effect_name(
        self_: *mut TimeEffect,
        effect_name: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn TimeEffect_name(self_: *mut TimeEffect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TimeEffect_set_name(self_: *mut TimeEffect, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn TimeEffect_metadata(self_: *mut TimeEffect) -> *mut AnyDictionary;
}
extern "C" {
    pub fn TimeEffect_to_json_file(
        self_: *mut TimeEffect,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn TimeEffect_to_json_string(
        self_: *mut TimeEffect,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TimeEffect_is_equivalent_to(
        self_: *mut TimeEffect,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn TimeEffect_clone(
        self_: *mut TimeEffect,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut TimeEffect;
}
extern "C" {
    pub fn TimeEffect_schema_name(self_: *mut TimeEffect) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn TimeEffect_schema_version(self_: *mut TimeEffect) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Timeline {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Timeline_create(
        name: *const ::std::os::raw::c_char,
        global_start_time: OptionalRationalTime,
        metadata: *mut AnyDictionary,
    ) -> *mut Timeline;
}
extern "C" {
    pub fn Timeline_tracks(self_: *mut Timeline) -> *mut Stack;
}
extern "C" {
    pub fn Timeline_set_tracks(self_: *mut Timeline, stack: *mut Stack);
}
extern "C" {
    pub fn Timeline_global_start_time(self_: *mut Timeline) -> OptionalRationalTime;
}
extern "C" {
    pub fn Timeline_set_global_start_time(
        self_: *mut Timeline,
        global_start_time: OptionalRationalTime,
    );
}
extern "C" {
    pub fn Timeline_duration(
        self_: *mut Timeline,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Timeline_range_of_child(
        self_: *mut Timeline,
        child: *mut Composable,
        error_status: *mut OTIOErrorStatus,
    ) -> TimeRange;
}
extern "C" {
    pub fn Timeline_audio_tracks(self_: *mut Timeline) -> *mut TrackVector;
}
extern "C" {
    pub fn Timeline_video_tracks(self_: *mut Timeline) -> *mut TrackVector;
}
extern "C" {
    pub fn Timeline_name(self_: *mut Timeline) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Timeline_set_name(self_: *mut Timeline, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Timeline_metadata(self_: *mut Timeline) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Timeline_to_json_file(
        self_: *mut Timeline,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Timeline_to_json_string(
        self_: *mut Timeline,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Timeline_is_equivalent_to(
        self_: *mut Timeline,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn Timeline_clone(
        self_: *mut Timeline,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Timeline;
}
extern "C" {
    pub fn Timeline_is_unknown_schema(self_: *mut Timeline) -> bool;
}
extern "C" {
    pub fn Timeline_schema_name(self_: *mut Timeline) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Timeline_schema_version(self_: *mut Timeline) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn track_trimmed_to_range(
        in_track: *mut Track,
        trim_range: TimeRange,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Track;
}
extern "C" {
    pub static mut TransitionType_SMPTE_Dissolve: *const ::std::os::raw::c_char;
}
extern "C" {
    pub static mut TransitionType_Custom: *const ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Transition {
    _unused: [u8; 0],
}
extern "C" {
    pub fn Transition_create(
        name: *const ::std::os::raw::c_char,
        transition_type: *const ::std::os::raw::c_char,
        in_offset: OptionalRationalTime,
        out_offset: OptionalRationalTime,
        metadata: *mut AnyDictionary,
    ) -> *mut Transition;
}
extern "C" {
    pub fn Transition_overlapping(self_: *mut Transition) -> bool;
}
extern "C" {
    pub fn Transition_transition_type(self_: *mut Transition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Transition_set_transition_type(
        self_: *mut Transition,
        transition_type: *const ::std::os::raw::c_char,
    );
}
extern "C" {
    pub fn Transition_in_offset(self_: *mut Transition) -> RationalTime;
}
extern "C" {
    pub fn Transition_set_in_offset(self_: *mut Transition, in_offset: RationalTime);
}
extern "C" {
    pub fn Transition_out_offset(self_: *mut Transition) -> RationalTime;
}
extern "C" {
    pub fn Transition_set_out_offset(self_: *mut Transition, out_offset: RationalTime);
}
extern "C" {
    pub fn Transition_duration(
        self_: *mut Transition,
        error_status: *mut OTIOErrorStatus,
    ) -> RationalTime;
}
extern "C" {
    pub fn Transition_range_in_parent(
        self_: *mut Transition,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Transition_trimmed_range_in_parent(
        self_: *mut Transition,
        error_status: *mut OTIOErrorStatus,
    ) -> OptionalTimeRange;
}
extern "C" {
    pub fn Transition_name(self_: *mut Transition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Transition_metadata(self_: *mut Transition) -> *mut AnyDictionary;
}
extern "C" {
    pub fn Transition_parent(self_: *mut Transition) -> *mut Composition;
}
extern "C" {
    pub fn Transition_visible(self_: *mut Transition) -> bool;
}
extern "C" {
    pub fn Transition_set_name(self_: *mut Transition, name: *const ::std::os::raw::c_char);
}
extern "C" {
    pub fn Transition_to_json_file(
        self_: *mut Transition,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn Transition_to_json_string(
        self_: *mut Transition,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Transition_is_equivalent_to(
        self_: *mut Transition,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn Transition_clone(
        self_: *mut Transition,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut Transition;
}
extern "C" {
    pub fn Transition_schema_name(self_: *mut Transition) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn Transition_schema_version(self_: *mut Transition) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeInfo {
    _unused: [u8; 0],
}
pub type TypeRegistryCreateFunction =
    ::std::option::Option<unsafe extern "C" fn() -> *mut OTIOSerializableObject>;
pub type TypeRegistryUpgradeFunction =
    ::std::option::Option<unsafe extern "C" fn(arg1: *mut AnyDictionary)>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TypeRegistry {
    _unused: [u8; 0],
}
extern "C" {
    pub fn TypeRegistry_instance() -> *mut TypeRegistry;
}
extern "C" {
    pub fn TypeRegistry_register_type_from_existing_type(
        self_: *mut TypeRegistry,
        schema_name: *const ::std::os::raw::c_char,
        schema_version: ::std::os::raw::c_int,
        existing_schema_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn TypeRegistry_instance_from_schema(
        self_: *mut TypeRegistry,
        schema_name: *const ::std::os::raw::c_char,
        schema_version: ::std::os::raw::c_int,
        dict: *mut AnyDictionary,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut OTIOSerializableObject;
}
extern "C" {
    pub fn TypeRegistry_set_type_record(
        self_: *mut TypeRegistry,
        var1: *mut OTIOSerializableObject,
        schema_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
    ) -> bool;
}
extern "C" {
    pub fn TypeRegistry_destroy(self_: *mut TypeRegistry);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UnknownSchema {
    _unused: [u8; 0],
}
extern "C" {
    pub fn UnknownSchema_create(
        original_schema_name: *const ::std::os::raw::c_char,
        original_schema_version: ::std::os::raw::c_int,
    ) -> *mut UnknownSchema;
}
extern "C" {
    pub fn UnknownSchema_original_schema_name(
        self_: *mut UnknownSchema,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn UnknownSchema_original_schema_version(
        self_: *mut UnknownSchema,
    ) -> ::std::os::raw::c_int;
}
extern "C" {
    pub fn UnknownSchema_is_unknown_schema(self_: *mut UnknownSchema) -> bool;
}
extern "C" {
    pub fn UnknownSchema_to_json_file(
        self_: *mut UnknownSchema,
        file_name: *const ::std::os::raw::c_char,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> bool;
}
extern "C" {
    pub fn UnknownSchema_to_json_string(
        self_: *mut UnknownSchema,
        error_status: *mut OTIOErrorStatus,
        indent: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn UnknownSchema_is_equivalent_to(
        self_: *mut UnknownSchema,
        other: *mut OTIOSerializableObject,
    ) -> bool;
}
extern "C" {
    pub fn UnknownSchema_clone(
        self_: *mut UnknownSchema,
        error_status: *mut OTIOErrorStatus,
    ) -> *mut UnknownSchema;
}
extern "C" {
    pub fn UnknownSchema_schema_name(self_: *mut UnknownSchema) -> *const ::std::os::raw::c_char;
}
extern "C" {
    pub fn UnknownSchema_schema_version(self_: *mut UnknownSchema) -> ::std::os::raw::c_int;
}
